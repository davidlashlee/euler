/*
Problem 12: Highly Divisble Triangular Number
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
Answer: 76576500
*/

package problems

import "math"

var primeList []int

func simpleSieve(limit int) []int {
	nums := make([]int, limit+1)
	primeList := []int{}
	for i := 2; i <= int(math.Sqrt(float64(limit))); i++ {
		if nums[i] == 0 {
			for j := i * i; j <= limit; j += i {
				nums[j] = 1
			}
		}
	}
	for i := 2; i <= limit; i++ {
		if nums[i] == 0 {
			primeList = append(primeList, i)
		}
	}
	return primeList
}

func primeFactors(n int) map[int]int {
	pfs := map[int]int{}
	for i := 0; i < len(primeList); {
		v := primeList[i]
		switch {
		case n%v == 0:
			n = n / v
			pfs[v] = pfs[v] + 1
		default:
			i++
		}
	}
	return pfs
}

func calcTotalFactors(n int) int {
	pfs := primeFactors(n)
	total := 1
	for _, v := range pfs {
		total = (v + 1) * total
	}
	return total
}

func Euler012() int {
	max := int(math.Sqrt(float64(^uint32(0))))
	primeList = simpleSieve(max)
	var tnum, divisors int
	for i := 1; divisors <= 500; i++ {
		tnum += i
		divisors = calcTotalFactors(tnum)
	}
	return tnum
}

// Brute Force Method
// func numOfDivisors(n int) int {
// 	divisorCount := 1
// 	for i := n; i > 1; i-- {
// 		if n%i == 0 {
// 			fmt.Println(i)
// 			divisorCount++
// 		}
// 	}
// 	return divisorCount
// }

// func bruteForce(goal int) int {
// 	var tnum, divisors int
// 	for i := 1; divisors <= goal; i++ {
// 		tnum += i
// 		divisors = numOfDivisors(tnum)
// 	}
// 	return divisors
// }
